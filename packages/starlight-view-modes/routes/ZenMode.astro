---
import type {
  GetStaticPaths,
  // InferGetStaticParamsType,
  InferGetStaticPropsType,
} from "astro";
import { render } from "astro:content";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import config from "virtual:starlight-view-modes-config";
import { getClassNameZenMode } from "../libs/utils";
import RenderHtmlWithRehype from "../components/RenderHtmlWithRehype.astro";
import isAbsoluteUrl from "is-absolute-url";
import { appendModePathname } from "../libs/utils";
import Renderer from "../components/Renderer.astro";
import { generateStaticPaths } from "../libs/server";
import { AdditionalModes } from "../libs/definitions";

export const getStaticPaths = (async () => {
  return await generateStaticPaths(
    AdditionalModes.find((mode) => mode.name === "zen-mode")!
  );
  // @ts-ignore
}) satisfies GetStaticPaths;

// type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const prerender = true;

const { entry, isFallback } = Astro.props as Props;
const { headings, remarkPluginFrontmatter } = await render(entry);

const { hasSidebar } = remarkPluginFrontmatter;

if (remarkPluginFrontmatter.hero?.actions) {
  for (const action of remarkPluginFrontmatter.hero.actions) {
    if (!isAbsoluteUrl(action.link)) {
      action.link = appendModePathname(action.link, "zen-mode");
    }
  }
}

const zenModeFileName = getClassNameZenMode(
  config.zenModeSettings.displayOptions
);
import.meta.glob("../styles/zen-mode/*.css");

let classes = [
  zenModeFileName,
  !config.zenModeSettings.displayOptions.showHeader &&
    "starlight-view-modes-zen-mode-no-header",
  !config.zenModeSettings.displayOptions.showSidebar &&
    "starlight-view-modes-zen-mode-no-sidebar",
  !config.zenModeSettings.displayOptions.showTableOfContents &&
    "starlight-view-modes-zen-mode-no-table-of-contents",
  !config.zenModeSettings.displayOptions.showFooter &&
    "starlight-view-modes-zen-mode-no-footer",
].filter(Boolean);

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawImageHtml: string | undefined;
const image = entry.data.hero?.image;

if (image) {
  if ("file" in image) {
    darkImage = image.file;
  } else if ("dark" in image) {
    darkImage = image.dark;
    lightImage = image.light;
  } else {
    rawImageHtml = image.html;
  }
}
---

{
  !darkImage && !lightImage && !rawImageHtml && (
    <StarlightPage
      frontmatter={{
        ...(remarkPluginFrontmatter as any),
        pagefind: false,
      }}
      headings={headings}
      hasSidebar={hasSidebar}
      {isFallback}
    >
      <div class:list={classes}>
        <RenderHtmlWithRehype>
          <Renderer {entry} />
        </RenderHtmlWithRehype>
      </div>
    </StarlightPage>
  )
}
{
  darkImage && lightImage && (
    <StarlightPage
      frontmatter={{
        ...(remarkPluginFrontmatter as any),
        hero: {
          ...remarkPluginFrontmatter.hero,
          image: {
            dark: darkImage,
            light: lightImage,
          },
        },
        pagefind: false,
      }}
      headings={headings}
      hasSidebar={hasSidebar}
      {isFallback}
    >
      <div class:list={classes}>
        <RenderHtmlWithRehype>
          <Renderer {entry} />
        </RenderHtmlWithRehype>
      </div>
    </StarlightPage>
  )
}
{
  darkImage && !lightImage && (
    <StarlightPage
      frontmatter={{
        ...(remarkPluginFrontmatter as any),
        hero: {
          ...remarkPluginFrontmatter.hero,
          image: {
            file: darkImage,
          },
        },
        pagefind: false,
      }}
      headings={headings}
      hasSidebar={hasSidebar}
      {isFallback}
    >
      <div class:list={classes}>
        <RenderHtmlWithRehype>
          <Renderer {entry} />
        </RenderHtmlWithRehype>
      </div>
    </StarlightPage>
  )
}
{
  rawImageHtml && (
    <StarlightPage
      frontmatter={{
        ...(remarkPluginFrontmatter as any),
        hero: {
          ...remarkPluginFrontmatter.hero,
          image: {
            html: rawImageHtml,
          },
        },
        pagefind: false,
      }}
      headings={headings}
      hasSidebar={hasSidebar}
      {isFallback}
    >
      <div class:list={classes}>
        <RenderHtmlWithRehype>
          <Renderer {entry} />
        </RenderHtmlWithRehype>
      </div>
    </StarlightPage>
  )
}
