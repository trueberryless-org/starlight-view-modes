---
import Icon from "./Icon.astro";
import KeyboardShortcuts from "./KeyboardShortcuts.astro";
const { toc } = Astro.locals.starlightRoute;
const { modes } = Astro.locals.starlightViewModes;

interface Props {
  type: "social-links" | "table-of-contents";
}
const { type } = Astro.props;
---

{
  type === "social-links" && (
    <>
      {modes.map((mode) => {
        if (mode.name === "default") return;
        let href = mode.href;
        if (mode.isCurrent)
          href = modes.find((m) => m.name === "default")?.href!;
        return (
          <a
            {href}
            class={`sl-flex starlight-view-modes-social-link-a starlight-view-modes-switcher-a`}
          >
            <span class="sr-only">
              {Astro.locals.t("starlightViewModes.switchTo", {
                text: Astro.locals.t(
                  mode.isCurrent
                    ? modes.find((mode) => mode.name === "default")?.title!
                    : mode.title
                ),
              })}
            </span>
            <Icon set:html={mode.icon} />
          </a>
        );
      })}
    </>
  )
}
{
  toc && type === "table-of-contents" && (
    <>
      <div class="starlight-view-modes-table-of-contents-container">
        {modes.length > 1 && (
          <>
            <h2>{Astro.locals.t("starlightViewModes.switchesHeading")}</h2>
            <ul>
              {modes.map((mode) => {
                if (mode.name === "default") return;
                let href = mode.href;
                if (mode.isCurrent)
                  href = modes.find((m) => m.name === "default")?.href!;
                return (
                  <li class="starlight-view-modes-table-of-contents-item">
                    <a {href} class={`starlight-view-modes-switcher-a`}>
                      {Astro.locals.t(
                        mode.isCurrent
                          ? modes.find((mode) => mode.name === "default")
                              ?.switchToText!
                          : mode.switchToText
                      )}
                    </a>
                    {mode.keyboardShortcuts && (
                      <KeyboardShortcuts shortcuts={mode.keyboardShortcuts} />
                    )}
                  </li>
                );
              })}
            </ul>
          </>
        )}
      </div>
    </>
  )
}

<style>
  .starlight-view-modes-social-link-a {
    color: var(--sl-color-text-accent);
  }
  .starlight-view-modes-social-link-a:hover {
    opacity: 0.66;
  }

  .starlight-view-modes-table-of-contents-container {
    margin-top: 1rem;
  }
  .starlight-view-modes-table-of-contents-container ul {
    padding: 0;
    list-style: none;
  }
  .starlight-view-modes-table-of-contents-container a {
    --pad-inline: 0.5rem;
    display: block;
    border-radius: 0.25rem;
    padding-block: 0.25rem;
    padding-inline: var(--pad-inline);
    line-height: 1.25;
  }
  .starlight-view-modes-table-of-contents-item {
    display: flex;
    align-items: center;
    gap: 0.3rem;
  }
</style>

<style is:global>
  .sl-container {
    display: block;
  }
</style>

<script>
  function updateModeLinksWithHash() {
    const hash = window.location.hash;
    document
      .querySelectorAll(".starlight-view-modes-switcher-a")
      .forEach((link) => {
        // @ts-ignore
        if (link.href) {
          // @ts-ignore
          link.href = link.href.split("#")[0] + hash;
        }
      });
  }

  // Run on initial load
  updateModeLinksWithHash();

  // Update on hash change
  window.addEventListener("hashchange", updateModeLinksWithHash);
</script>
